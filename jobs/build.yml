jobs:
- job: Build
  displayName: 'Build'
  pool:
    vmImage: 'macos-13'

  variables:
    sdk: ${{ parameters.sdk }}
    signing: ${{ parameters.signing }}
    backend: ${{ parameters.backend }}
    XC_VERSION: ${{ '14.3.1' }}
    XC_WORKSPACE: ${{ 'MobileCelestia/MobileCelestia.xcworkspace' }}
    XC_SCHEME: ${{ 'MobileCelestia' }}
    XC_ARCHIVE_PARENT_PATH: ${{ '$(system.defaultworkingdirectory)/archive' }}
    XC_ARCHIVE_PATH: ${{ '$(system.defaultworkingdirectory)/archive/MobileCelestia.xcarchive' }}
    XC_EXPORT_PATH: ${{ '$(agent.buildDirectory)/output' }}
    IOS_PROVISIONING_PROFILE_UUID: ${{ 'fe126c02-f218-471b-8af4-94d33dc76a29' }}
    MAC_APP_STORE_PROVISIONING_PROFILE_UUID: ${{ 'e5feda40-1051-424e-b898-7b24d0f29ba9' }}
    MAC_DEVELOPER_ID_PROVISIONING_PROFILE_UUID: ${{ '1e444495-f70f-40b9-9897-7e05ab2cc975' }}
    DISTRIBUTION_IDENTITY: 'Apple Distribution: Linfeng Li (22NR5428TD)'
    DEVELOPER_ID_IDENTITY: 'Developer ID Application: Linfeng Li (22NR5428TD)'

  steps:
  - checkout: Celestia
    fetchDepth: 0
  - checkout: CelestiaCore
    fetchDepth: 0
  - checkout: CelestiaContent
    fetchDepth: 0
  - checkout: CelestiaLocalization
    fetchDepth: 0
  - checkout: self
    fetchDepth: 0

  - script: |
      cd Celestia
      git checkout origin/$(Build.SourceBranchName)
      cd ../CelestiaCore
      git checkout origin/$(Build.SourceBranchName)
      cd ../CelestiaLocalization
      git checkout origin/$(Build.SourceBranchName)
    displayName: 'Checkout Branch'
    condition: ne( variables['Build.Reason'], 'PullRequest' )

  - script: |
      cd Celestia
      git checkout origin/$(System.PullRequest.TargetBranch)
      cd ../CelestiaCore
      git checkout origin/$(System.PullRequest.TargetBranch)
      cd ../CelestiaLocalization
      git checkout origin/$(System.PullRequest.TargetBranch)
    displayName: 'Checkout Branch (PR)'
    condition: eq( variables['Build.Reason'], 'PullRequest' )

  - script: |
      cd Celestia
      git cherry-pick origin/angle-$(Build.SourceBranchName)
    displayName: 'Cherry-Pick ANGLE Commit'
    condition: and(eq( variables['backend'], 'angle' ), ne( variables['Build.Reason'], 'PullRequest' ))

  - script: |
      cd Celestia
      git cherry-pick origin/angle-$(System.PullRequest.TargetBranch)
    displayName: 'Cherry-Pick ANGLE Commit (PR)'
    condition: and(eq( variables['backend'], 'angle' ), eq( variables['Build.Reason'], 'PullRequest' ))

  - script: |
      cd CelestiaCore
      git cherry-pick origin/angle-$(Build.SourceBranchName)
    displayName: 'Cherry-Pick ANGLE Commit (1)'
    condition: and( eq( variables['backend'], 'angle' ), ne( variables['Build.Reason'], 'PullRequest' ))

  - script: |
      cd CelestiaCore
      git cherry-pick origin/angle-$(System.PullRequest.TargetBranch)
    displayName: 'Cherry-Pick ANGLE Commit (1) (PR)'
    condition: and(eq( variables['backend'], 'angle' ), eq( variables['Build.Reason'], 'PullRequest' ))

  - script: |
      cd CelestiaContent
      git checkout 4b07c079d31c7b174d1a9d8efbf1db92f54fa05d
    displayName: 'Checkout Content'

  - script: |
      cd MobileCelestia
      git cherry-pick origin/angle-$(Build.SourceBranchName)
    displayName: 'Cherry-Pick ANGLE Commit (2)'
    condition: and(eq( variables['backend'], 'angle' ), ne( variables['Build.Reason'], 'PullRequest' ))

  - script: |
      cd MobileCelestia
      git cherry-pick origin/angle-$(System.PullRequest.TargetBranch)
    displayName: 'Cherry-Pick ANGLE Commit (2) (PR)'
    condition: and(eq( variables['backend'], 'angle' ), eq( variables['Build.Reason'], 'PullRequest' ))

  - script: |
      mkdir -p CelestiaCore/libs/dependency/ios
      mkdir -p CelestiaCore/libs/dependency/catalyst
    displayName: 'Creating Directories for Third Party Dependencies'

  - task: UniversalPackages@0
    inputs:
      command: 'download'
      downloadDirectory: 'CelestiaCore/libs/dependency/catalyst'
      feedsToUse: 'internal'
      vstsFeed: '9f9dcde1-dcba-4537-8214-71c8a03b99a0/14bb1031-e6b2-40ac-b287-73e7fcb5900e'
      vstsFeedPackage: 'ef4b9b1c-43f9-4b15-91ae-8a601ae5ef45'
      vstsPackageVersion: '0.0.11'
    displayName: 'Download Catalyst Dependencies'
    condition: eq( variables['sdk'], 'macosx' )

  - task: UniversalPackages@0
    inputs:
      command: 'download'
      downloadDirectory: 'CelestiaCore/libs/dependency/ios'
      feedsToUse: 'internal'
      vstsFeed: '9f9dcde1-dcba-4537-8214-71c8a03b99a0/14bb1031-e6b2-40ac-b287-73e7fcb5900e'
      vstsFeedPackage: '929aa8ac-b8eb-409b-afe7-30f2b73aebc8'
      vstsPackageVersion: '0.0.11'
    displayName: 'Download iOS Dependencies'
    condition: eq( variables['sdk'], 'iphoneos' )

  - script: |
      sudo xcode-select -s /Applications/Xcode_$XC_VERSION.app
    displayName: 'Select Latest Xcode'

  - script: |
      cd MobileCelestia
      pod deintegrate
      pod install
    displayName: 'Reintegrate CocoaPods'

  - script: |
      brew install gettext gperf
    displayName: 'Install Dependencies'

  - script: |
      cd $(System.DefaultWorkingDirectory)/Celestia/src/celscript/legacy
      $(brew --prefix)/bin/gperf commands.gperf -m4 --output-file=commands.inc
      cd $(System.DefaultWorkingDirectory)/Celestia/src/celephem
      $(brew --prefix)/bin/gperf customrotation.gperf -m4 --output-file=customrotation.inc
      $(brew --prefix)/bin/gperf customorbit.gperf -m4 --output-file=customorbit.inc
    displayName: 'Running gperf'

  - task: NodeTool@0
    inputs:
      versionSource: 'spec'
      versionSpec: '14.9.0'
    displayName: 'Install Node.js'

  - script: |
      npm install -g appcenter-cli
    displayName: 'Install AppCenter-CLI'

  - task: DownloadSecureFile@1
    name: macInstallerP12
    inputs:
      secureFile: 'MacInstallerDistribution20240523.p12'
    displayName: 'Download Mac Installer Certificate'

  - task: DownloadSecureFile@1
    name: distributionP12
    inputs:
      secureFile: 'AppleDistribution20240523.p12'
    displayName: 'Download Distribution Certificate'

  - task: DownloadSecureFile@1
    name: developerIDP12
    inputs:
      secureFile: 'DeveloperIDApplication20270202.p12'
    displayName: 'Download Developer ID Certificate'

  - task: DownloadSecureFile@1
    name: iosProvisioningProfile
    inputs:
      secureFile: 'iOSDistribution20240523.mobileprovision'
    displayName: 'Download iOS Provisioning Profile'

  - task: DownloadSecureFile@1
    name: macAppStoreProvisioningProfile
    inputs:
      secureFile: 'MacDistribution20240523.provisionprofile'
    displayName: 'Download Mac (App Store) Provisioning Profile'

  - task: DownloadSecureFile@1
    name: macDeveloperIDProvisioningProfile
    inputs:
      secureFile: 'DeveloperIDApplication20270202.provisionprofile'
    displayName: 'Download Mac (Developer ID) Provisioning Profile'

  - script: |
      sed -i '' 's/APPCENTER-APP-CATALYST/63a9e404-a07b-40eb-a5e7-320f65934b05/g' MobileCelestia/AppDelegate.swift
      sed -i '' 's/APPCENTER-APP-IOS/4c46cd7d-ea97-452b-920c-4328ac062db3/g' MobileCelestia/AppDelegate.swift
      echo "New Content:"
      cat MobileCelestia/AppDelegate.swift
    workingDirectory: '$(System.DefaultWorkingDirectory)/MobileCelestia'
    displayName: 'Replace AppCenter Placeholders'

  - script: |
      # create variables
      KEYCHAIN_PATH=$(Agent.TempDirectory)/app-signing.keychain-db
      KEYCHAIN_PASSWORD=temppassword
      # create temporary keychain
      security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      # import certificate to keychain
      security import "$(macInstallerP12.secureFilePath)" -P "$(P12_PASSWORD)" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      security import "$(distributionP12.secureFilePath)" -P "$(P12_PASSWORD)" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      security import "$(developerIDP12.secureFilePath)" -P "$(P12_PASSWORD)" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      security list-keychain -d user -s $KEYCHAIN_PATH
      # apply provisioning profile
      mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      cp "$(iosProvisioningProfile.secureFilePath)" ~/Library/MobileDevice/Provisioning\ Profiles
      cp "$(macAppStoreProvisioningProfile.secureFilePath)" ~/Library/MobileDevice/Provisioning\ Profiles
      cp "$(macDeveloperIDProvisioningProfile.secureFilePath)" ~/Library/MobileDevice/Provisioning\ Profiles
    displayName: 'Install Certificates and Provisioning Profiles'

  - script: |
      /usr/bin/xcodebuild archive -workspace "$XC_WORKSPACE" -scheme "$XC_SCHEME" -configuration "Release" -destination "generic/platform=iOS" -archivePath "$XC_ARCHIVE_PATH" CODE_SIGN_STYLE="Manual" PROVISIONING_PROFILE="$(IOS_PROVISIONING_PROFILE_UUID)" CODE_SIGN_IDENTITY="$(DISTRIBUTION_IDENTITY)"
    displayName: 'Build Archive (iOS)'
    condition: eq( variables['sdk'], 'iphoneos' )

  - script: |
      /usr/bin/xcodebuild archive -workspace "$XC_WORKSPACE" -scheme "$XC_SCHEME" -configuration "Release" -destination "platform=macOS,variant=Mac Catalyst" -archivePath "$XC_ARCHIVE_PATH" CODE_SIGN_STYLE="Manual" PROVISIONING_PROFILE="$(MAC_APP_STORE_PROVISIONING_PROFILE_UUID)" CODE_SIGN_IDENTITY="$(DISTRIBUTION_IDENTITY)"
    displayName: 'Build Archive (Mac, App Store)'
    condition: and(eq( variables['sdk'], 'macosx' ), eq( variables['signing'], 'appStore' ))

  - script: |
      /usr/bin/xcodebuild archive -workspace "$XC_WORKSPACE" -scheme "$XC_SCHEME" -configuration "Release" -destination "platform=macOS,variant=Mac Catalyst" -archivePath "$XC_ARCHIVE_PATH" CODE_SIGN_STYLE="Manual" PROVISIONING_PROFILE="$(MAC_DEVELOPER_ID_PROVISIONING_PROFILE_UUID)" CODE_SIGN_IDENTITY="$(DEVELOPER_ID_IDENTITY)"
    displayName: 'Build Archive (Mac, Developer ID)'
    condition: and(eq( variables['sdk'], 'macosx' ), eq( variables['signing'], 'developerID' ))

  - script: |
      /usr/bin/xcodebuild -exportArchive -archivePath "$XC_ARCHIVE_PATH" -exportOptionsPlist "MobileCelestia/ExportOptions-$(sdk)-$(signing).plist" -exportPath "$XC_EXPORT_PATH"
    displayName: 'Export Archive'

  - script: |
      cd $(XC_ARCHIVE_PARENT_PATH)
      zip -r -v -y $(Build.ArtifactStagingDirectory)/Archive.zip *.xcarchive
    displayName: 'Create .zip for .xcarchive'

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(XC_EXPORT_PATH)'
      contents: '**/*.ipa'
      targetFolder: '$(build.artifactStagingDirectory)'
    displayName: 'Copy .ipa'
    condition: eq( variables['sdk'], 'iphoneos' )

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(XC_EXPORT_PATH)'
      contents: '**/*.pkg'
      targetFolder: '$(build.artifactStagingDirectory)'
    displayName: 'Copy .pkg'
    condition: and(eq( variables['sdk'], 'macosx' ), eq( variables['signing'], 'appStore' ))

  - script: |
      cd $(XC_EXPORT_PATH)
      zip -r -v -y $(Build.ArtifactStagingDirectory)/App.zip *.app
    displayName: 'Create .zip Archive for .app'
    condition: and(eq( variables['sdk'], 'macosx' ), eq( variables['signing'], 'developerID' ))

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: '$(sdk)-$(signing)-$(backend)'
      publishLocation: 'Container'
    displayName: 'Publish Build Artifacts'

  - script: |
      cd $XC_ARCHIVE_PATH/dSYMs
      zip -vr symbols.zip * -x "*.DS_Store"
      appcenter crashes upload-symbols --symbol symbols.zip --app CelestiaProject/Celestia --token $(IOS_APPCENTER_TOKEN) --disable-telemetry --debug
    displayName: 'Upload Symbols (iOS)'
    condition: and( succeeded(), eq( variables['sdk'], 'iphoneos' ) )

  - script: |
      cd $XC_ARCHIVE_PATH/dSYMs
      zip -vr symbols.zip * -x "*.DS_Store"
      appcenter crashes upload-symbols --symbol symbols.zip --app CelestiaProject/Celestia-3 --token $(MAC_APPCENTER_TOKEN) --disable-telemetry --debug
    displayName: 'Upload Symbols (Mac)'
    condition: eq( variables['sdk'], 'macosx' )

  - script: |
      xcrun notarytool store-credentials "AC_PASSWORD" --apple-id $(AC_ACCOUNT_NAME) --team-id 22NR5428TD --password $(AC_ACCOUNT_PASSWORD)
      xcrun notarytool submit "$(Build.ArtifactStagingDirectory)/App.zip" --keychain-profile "AC_PASSWORD" --wait
    displayName: "Notarize App"
    condition: and(eq( variables['sdk'], 'macosx' ), eq( variables['signing'], 'developerID' ))
