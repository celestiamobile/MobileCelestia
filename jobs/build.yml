jobs:
- job: Build
  displayName: 'Build'
  pool:
    vmImage: 'macos-11'

  variables:
    sdk: ${{ parameters.sdk }}

  steps:
  - checkout: Celestia
  - checkout: CelestiaCore
  - checkout: self

  - script: |
      cd Celestia
      git checkout origin/$(Build.SourceBranchName)
      git submodule update --init
      cd ../CelestiaCore
      git checkout origin/$(Build.SourceBranchName)
      git submodule update --init
    displayName: 'Checkout Branch'
    condition: ne( variables['Build.Reason'], 'PullRequest' )

  - script: |
      cd Celestia
      git checkout origin/$(System.PullRequest.TargetBranch)
      git submodule update --init
      cd ../CelestiaCore
      git checkout origin/$(System.PullRequest.TargetBranch)
      git submodule update --init
    displayName: 'Checkout Branch (PR)'
    condition: eq( variables['Build.Reason'], 'PullRequest' )

  - script: |
      cd Celestia
      git cherry-pick origin/angle
    displayName: 'Cherry-Pick ANGLE Commit'
    condition: eq( variables['sdk'], 'macosx' )

  - script: |
      cd MobileCelestia
      pod deintegrate
      pod install
    displayName: 'Reintegrate CocoaPods'

  - script: |
      brew install gettext
    displayName: 'Install Gettext'

  - task: InstallAppleCertificate@2
    inputs:
      certSecureFile: '20210508.p12'
      certPwd: $(P12Password)
    displayName: 'Install Distribution Certificate'
    condition: ne( variables['sdk'], 'macosx' )

  - task: InstallAppleCertificate@2
    inputs:
      certSecureFile: 'DeveloperID.p12'
      certPwd: $(P12Password)
    displayName: 'Install Developer ID Certificate'
    condition: eq( variables['sdk'], 'macosx' )

  - task: InstallAppleProvisioningProfile@1
    inputs:
      provProfileSecureFile: MobileCelestiaDistrition20210508.mobileprovision
    displayName: 'Install Provision File (iOS)'
    condition: ne( variables['sdk'], 'macosx' )

  - task: InstallAppleProvisioningProfile@1
    inputs:
      provProfileSecureFile: MobileCelestiaDeveloperID20250605.provisionprofile
    displayName: 'Install Provision File (Catalyst)'
    condition: eq( variables['sdk'], 'macosx' )

  - task: Xcode@5
    inputs:
      actions: 'build'
      packageApp: true
      signingOption: manual
      signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
      provisioningProfileUuid: '$(APPLE_PROV_PROFILE_UUID)'
      scheme: 'MobileCelestia'
      sdk: $(sdk)
      configuration: 'Release'
      xcWorkspacePath: '$(system.defaultworkingdirectory)/MobileCelestia/MobileCelestia.xcworkspace'
      xcodeVersion: '13'
      exportPath: '$(agent.buildDirectory)/output/$(sdk)'
      archivePath: '$(system.defaultworkingdirectory)/archive'
    displayName: 'Build'

  - script: |
      cd $(system.defaultworkingdirectory)/archive
      zip -r -v -y $(Build.ArtifactStagingDirectory)/Archive.zip *.xcarchive
    displayName: 'Create .zip for .xcarchive'

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(agent.buildDirectory)/output/$(sdk)'
      contents: '**/*.ipa'
      targetFolder: '$(build.artifactStagingDirectory)'
    displayName: 'Copy .ipa'
    condition: ne( variables['sdk'], 'macosx' )

  - script: |
      cd $(agent.buildDirectory)/output/$(sdk)
      zip -r -v -y $(Build.ArtifactStagingDirectory)/App.zip *.app
    displayName: 'Create .zip Archive for .app'
    condition: eq( variables['sdk'], 'macosx' )

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: '$(sdk)'
      publishLocation: 'Container'
    displayName: 'Publish Build Artifacts'

  - task: AppCenterDistribute@3
    inputs:
      serverEndpoint: MobileCelestiaAppCenter
      appSlug: 'CelestiaProject/Celestia'
      appFile: '$(build.artifactstagingdirectory)/**/*.ipa'
      symbolsDsymFiles: '$(system.defaultworkingdirectory)/archive/**/*.dSYM'
      releaseNotesOption: 'input'
      releaseNotesInput: 'Internal testing only.'
      destinationType: 'groups'
    displayName: 'Publish to App Center (iOS)'
    condition: ne( variables['sdk'], 'macosx' )

  - task: AppCenterDistribute@3
    inputs:
      serverEndpoint: MobileCatalystCelestiaAppCenter
      appSlug: 'CelestiaProject/Celestia-3'
      appFile: '$(Build.ArtifactStagingDirectory)/App.zip'
      symbolsDsymFiles: '$(system.defaultworkingdirectory)/archive/**/*.dSYM'
      releaseNotesOption: 'input'
      releaseNotesInput: 'Internal testing only.'
      destinationType: 'groups'
    displayName: 'Publish to App Center (Catalyst)'
    condition: eq( variables['sdk'], 'macosx' )

  - script: |
      xcrun altool --notarize-app --primary-bundle-id space.celestia.MobileCelestia --username $(AC_ACCOUNT_NAME) --password $(AC_ACCOUNT_PASSWORD) -f $(Build.ArtifactStagingDirectory)/App.zip
    displayName: "Notarize App"
    condition: eq( variables['sdk'], 'macosx' )
