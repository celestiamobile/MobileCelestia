jobs:
- job: Build
  displayName: 'Build'
  pool:
    vmImage: 'macos-15'

  variables:
    sdk: ${{ parameters.sdk }}
    signing: ${{ parameters.signing }}
    backend: ${{ parameters.backend }}
    contentCommitHash: ${{ '8bc11f1421e192b43197a8d2743da52eb8f04b40' }}
    XC_VERSION: ${{ '16.3' }}
    XC_PROJECT: ${{ 'MobileCelestia/MobileCelestia.xcodeproj' }}
    XC_SCHEME: ${{ 'MobileCelestia' }}
    XC_ARCHIVE_PARENT_PATH: ${{ '$(system.defaultworkingdirectory)/archive' }}
    XC_ARCHIVE_PATH: ${{ '$(system.defaultworkingdirectory)/archive/MobileCelestia.xcarchive' }}
    XC_EXPORT_PATH: ${{ '$(agent.buildDirectory)/output' }}
    IOS_PROVISIONING_PROFILE_UUID: ${{ 'dada330c-c47b-44df-9932-534b471e750d' }}
    MAC_APP_STORE_PROVISIONING_PROFILE_UUID: ${{ '9b3087ea-0c47-479c-90c4-129c530f04b3' }}
    MAC_DEVELOPER_ID_PROVISIONING_PROFILE_UUID: ${{ '05aab2eb-1c4c-4e55-a63d-e0721011273d' }}
    DISTRIBUTION_IDENTITY: 'Apple Distribution: Linfeng Li (22NR5428TD)'
    DEVELOPER_ID_IDENTITY: 'Developer ID Application: Linfeng Li (22NR5428TD)'

  steps:
  - checkout: Celestia
    fetchDepth: 0
  - checkout: CelestiaCore
    fetchDepth: 0
  - checkout: CelestiaContent
    fetchDepth: 0
  - checkout: CelestiaLocalization
    fetchDepth: 0
  - checkout: self
    fetchDepth: 0

  - script: |
      cd Celestia
      git checkout origin/$(Build.SourceBranchName)
      cd ../CelestiaCore
      git checkout origin/$(Build.SourceBranchName)
      cd ../CelestiaLocalization
      git checkout origin/$(Build.SourceBranchName)
    displayName: 'Checkout Branch'
    condition: ne( variables['Build.Reason'], 'PullRequest' )

  - script: |
      cd Celestia
      git checkout origin/$(System.PullRequest.TargetBranch)
      cd ../CelestiaCore
      git checkout origin/$(System.PullRequest.TargetBranch)
      cd ../CelestiaLocalization
      git checkout origin/$(System.PullRequest.TargetBranch)
    displayName: 'Checkout Branch (PR)'
    condition: eq( variables['Build.Reason'], 'PullRequest' )

  - script: |
      cd Celestia
      git apply ../MobileCelestia/patches/angle/celestia.patch --ignore-whitespace --whitespace=nowarn
    displayName: 'Apply ANGLE Patches (1)'
    condition: eq( variables['backend'], 'angle' )

  - script: |
      cd CelestiaCore
      git apply ../MobileCelestia/patches/angle/celestiacore.patch --ignore-whitespace --whitespace=nowarn
    displayName: 'Apply ANGLE Patches (2)'
    condition: eq( variables['backend'], 'angle' )

  - script: |
      cd MobileCelestia
      git apply patches/angle/mobilecelestia.patch --ignore-whitespace --whitespace=nowarn
    displayName: 'Apply ANGLE Patches (3)'
    condition: eq( variables['backend'], 'angle' )

  - script: |
      cd CelestiaContent
      git checkout $(contentCommitHash)
    displayName: 'Checkout Content'

  - script: |
      mkdir -p CelestiaCore/libs/dependency/ios
      mkdir -p CelestiaCore/libs/dependency/catalyst
    displayName: 'Creating Directories for Third Party Dependencies'

  - task: UniversalPackages@0
    inputs:
      command: 'download'
      downloadDirectory: 'CelestiaCore/libs/dependency'
      feedsToUse: 'internal'
      vstsFeed: '9f9dcde1-dcba-4537-8214-71c8a03b99a0/14bb1031-e6b2-40ac-b287-73e7fcb5900e'
      vstsFeedPackage: 'ef4b9b1c-43f9-4b15-91ae-8a601ae5ef45'
      vstsPackageVersion: '0.0.24'
    displayName: 'Download Catalyst Dependencies'
    condition: eq( variables['sdk'], 'macosx' )

  - task: UniversalPackages@0
    inputs:
      command: 'download'
      downloadDirectory: 'CelestiaCore/libs/dependency'
      feedsToUse: 'internal'
      vstsFeed: '9f9dcde1-dcba-4537-8214-71c8a03b99a0/14bb1031-e6b2-40ac-b287-73e7fcb5900e'
      vstsFeedPackage: '929aa8ac-b8eb-409b-afe7-30f2b73aebc8'
      vstsPackageVersion: '0.0.24'
    displayName: 'Download iOS Dependencies'
    condition: eq( variables['sdk'], 'iphoneos' )

  - script: |
      sudo xcode-select -s /Applications/Xcode_$XC_VERSION.app
      xcodebuild -version
    displayName: 'Select Latest Xcode'

  - script: |
      rm -rf /usr/local/bin/2to3* /usr/local/bin/idle3* /usr/local/bin/pydoc* /usr/local/bin/python* /usr/local/share/man/man1/python* /usr/local/lib/pkgconfig/python* /usr/local/Frameworks/Python.framework
      brew install gettext gperf node imagemagick
    displayName: 'Install Dependencies'

  - script: |
      sh $(System.DefaultWorkingDirectory)/CelestiaCore/downsize_textures.sh
    displayName: 'Running imagemagick'

  - script: |
      sh $(System.DefaultWorkingDirectory)/CelestiaCore/run_gperf.sh $(System.DefaultWorkingDirectory)/Celestia
    displayName: 'Running gperf'

  - script: |
      brew install getsentry/tools/sentry-cli
    displayName: 'Install Sentry-CLI'

  - task: DownloadSecureFile@1
    name: macInstallerP12
    inputs:
      secureFile: 'MacInstallerDistribution20250522.p12'
    displayName: 'Download Mac Installer Certificate'

  - task: DownloadSecureFile@1
    name: distributionP12
    inputs:
      secureFile: 'AppleDistribution20250522.p12'
    displayName: 'Download Distribution Certificate'

  - task: DownloadSecureFile@1
    name: developerIDP12
    inputs:
      secureFile: 'DeveloperIDApplication20270202.p12'
    displayName: 'Download Developer ID Certificate'

  - task: DownloadSecureFile@1
    name: iosProvisioningProfile
    inputs:
      secureFile: 'iOSDistribution20250522.mobileprovision'
    displayName: 'Download iOS Provisioning Profile'

  - task: DownloadSecureFile@1
    name: macAppStoreProvisioningProfile
    inputs:
      secureFile: 'MacDistribution20250522.provisionprofile'
    displayName: 'Download Mac (App Store) Provisioning Profile'

  - task: DownloadSecureFile@1
    name: macDeveloperIDProvisioningProfile
    inputs:
      secureFile: 'DeveloperIDApplication20270202.provisionprofile'
    displayName: 'Download Mac (Developer ID) Provisioning Profile'

  - script: |
      TO_REPLACE="SENTRY-CATALYST-DSN"
      NEW_STRING=$(SENTRY-CATALYST-DSN)
      sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" MobileCelestia/AppDelegate.swift
      TO_REPLACE="SENTRY-IOS-DSN"
      NEW_STRING=$(SENTRY-IOS-DSN)
      sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" MobileCelestia/AppDelegate.swift
      echo "New Content:"
      cat MobileCelestia/AppDelegate.swift
    workingDirectory: '$(System.DefaultWorkingDirectory)/MobileCelestia'
    displayName: 'Replace Sentry Placeholders'

  - script: |
      mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      cp "$(iosProvisioningProfile.secureFilePath)" ~/Library/MobileDevice/Provisioning\ Profiles
      cp "$(macAppStoreProvisioningProfile.secureFilePath)" ~/Library/MobileDevice/Provisioning\ Profiles
      cp "$(macDeveloperIDProvisioningProfile.secureFilePath)" ~/Library/MobileDevice/Provisioning\ Profiles
    displayName: 'Install Provisioning Profiles'

  - script: |
      KEYCHAIN_PATH=$(Agent.TempDirectory)/app-signing-mac-installer.keychain-db
      KEYCHAIN_PASSWORD=temppassword
      security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      security import "$(macInstallerP12.secureFilePath)" -P "$(P12_PASSWORD)" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      security list-keychains -d user -s $(security list-keychains -d user | sed -e s/\"//g) $KEYCHAIN_PATH
    displayName: 'Install Certificates (Mac Installer)'

  - script: |
      KEYCHAIN_PATH=$(Agent.TempDirectory)/app-signing-distribution.keychain-db
      KEYCHAIN_PASSWORD=temppassword
      security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      security import "$(distributionP12.secureFilePath)" -P "$(P12_PASSWORD)" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      security list-keychains -d user -s $(security list-keychains -d user | sed -e s/\"//g) $KEYCHAIN_PATH
    displayName: 'Install Certificates (Apple Distribution)'

  - script: |
      KEYCHAIN_PATH=$(Agent.TempDirectory)/app-signing-developer-id.keychain-db
      KEYCHAIN_PASSWORD=temppassword
      security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      security import "$(developerIDP12.secureFilePath)" -P "$(P12_PASSWORD)" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      security list-keychains -d user -s $(security list-keychains -d user | sed -e s/\"//g) $KEYCHAIN_PATH
    displayName: 'Install Certificates (Developer ID)'

  - script: |
      sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' $XC_PROJECT/project.pbxproj
      sed -i '' 's/PROVISIONING_PROFILE_SPECIFIER = "";/PROVISIONING_PROFILE_SPECIFIER = "$(IOS_PROVISIONING_PROFILE_UUID)";/g' $XC_PROJECT/project.pbxproj
      sed -i '' 's/CODE_SIGN_IDENTITY = "Apple Development";/CODE_SIGN_IDENTITY = "$(DISTRIBUTION_IDENTITY)";/g' $XC_PROJECT/project.pbxproj

      /usr/bin/xcodebuild archive -project "$XC_PROJECT" -scheme "$XC_SCHEME" -configuration "Release" -destination "generic/platform=iOS" -archivePath "$XC_ARCHIVE_PATH"
    displayName: 'Build Archive (iOS)'
    condition: eq( variables['sdk'], 'iphoneos' )

  - script: |
      sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' $XC_PROJECT/project.pbxproj
      sed -i '' 's/PROVISIONING_PROFILE_SPECIFIER = "";/PROVISIONING_PROFILE_SPECIFIER = "$(MAC_APP_STORE_PROVISIONING_PROFILE_UUID)";/g' $XC_PROJECT/project.pbxproj
      sed -i '' 's/CODE_SIGN_IDENTITY = "Apple Development";/CODE_SIGN_IDENTITY = "$(DISTRIBUTION_IDENTITY)";/g' $XC_PROJECT/project.pbxproj

      /usr/bin/xcodebuild archive -project "$XC_PROJECT" -scheme "$XC_SCHEME" -configuration "Release" -destination "platform=macOS,variant=Mac Catalyst" -archivePath "$XC_ARCHIVE_PATH"
    displayName: 'Build Archive (Mac, App Store)'
    condition: and(eq( variables['sdk'], 'macosx' ), eq( variables['signing'], 'appStore' ))

  - script: |
      sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' $XC_PROJECT/project.pbxproj
      sed -i '' 's/PROVISIONING_PROFILE_SPECIFIER = "";/PROVISIONING_PROFILE_SPECIFIER = "$(MAC_DEVELOPER_ID_PROVISIONING_PROFILE_UUID)";/g' $XC_PROJECT/project.pbxproj
      sed -i '' 's/CODE_SIGN_IDENTITY = "Apple Development";/CODE_SIGN_IDENTITY = "$(DEVELOPER_ID_IDENTITY)";/g' $XC_PROJECT/project.pbxproj

      /usr/bin/xcodebuild archive -project "$XC_PROJECT" -scheme "$XC_SCHEME" -configuration "Release" -destination "platform=macOS,variant=Mac Catalyst" -archivePath "$XC_ARCHIVE_PATH"
    displayName: 'Build Archive (Mac, Developer ID)'
    condition: and(eq( variables['sdk'], 'macosx' ), eq( variables['signing'], 'developerID' ))

  - script: |
      /usr/bin/xcodebuild -exportArchive -archivePath "$XC_ARCHIVE_PATH" -exportOptionsPlist "MobileCelestia/ExportOptions-$(sdk)-$(signing).plist" -exportPath "$XC_EXPORT_PATH"
    displayName: 'Export Archive'

  - script: |
      mkdir -p $(Build.ArtifactStagingDirectory)/archive
      mkdir -p $(Build.ArtifactStagingDirectory)/product
    displayName: 'Create Artifact Folders'

  - script: |
      cd $(XC_ARCHIVE_PARENT_PATH)
      zip -r -v -y $(Build.ArtifactStagingDirectory)/archive/Archive.zip *.xcarchive
    displayName: 'Create .zip for .xcarchive'

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(XC_EXPORT_PATH)'
      contents: '**/*.ipa'
      targetFolder: '$(build.artifactStagingDirectory)/product'
    displayName: 'Copy .ipa'
    condition: eq( variables['sdk'], 'iphoneos' )

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(XC_EXPORT_PATH)'
      contents: '**/*.pkg'
      targetFolder: '$(build.artifactStagingDirectory)/product'
    displayName: 'Copy .pkg'
    condition: and(eq( variables['sdk'], 'macosx' ), eq( variables['signing'], 'appStore' ))

  - script: |
      cd $(XC_EXPORT_PATH)
      zip -r -v -y $(Build.ArtifactStagingDirectory)/product/App.zip *.app
    displayName: 'Create .zip Archive for .app'
    condition: and(eq( variables['sdk'], 'macosx' ), eq( variables['signing'], 'developerID' ))

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/product'
      ArtifactName: '$(sdk)-$(signing)-$(backend)-product'
      publishLocation: 'Container'
    displayName: 'Publish Product Artifacts'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/archive'
      ArtifactName: '$(sdk)-$(signing)-$(backend)-archive'
      publishLocation: 'Container'
    displayName: 'Publish Archive Artifacts'

  - script: |
      export SENTRY_ORG=celestia-vs
      export SENTRY_PROJECT=apple-ios
      export SENTRY_AUTH_TOKEN=$(SENTRY_AUTH_TOKEN)
      sentry-cli debug-files upload --include-sources $XC_ARCHIVE_PATH/dSYMs
    displayName: 'Upload Symbols (iOS)'
    condition: and( succeeded(), eq( variables['sdk'], 'iphoneos' ) )

  - script: |
      export SENTRY_ORG=celestia-vs
      export SENTRY_PROJECT=apple-catalyst
      export SENTRY_AUTH_TOKEN=$(SENTRY_AUTH_TOKEN)
      sentry-cli debug-files upload --include-sources $XC_ARCHIVE_PATH/dSYMs
    displayName: 'Upload Symbols (Mac)'
    condition: eq( variables['sdk'], 'macosx' )

  - script: |
      xcrun notarytool store-credentials "AC_PASSWORD" --apple-id $(AC_ACCOUNT_NAME) --team-id 22NR5428TD --password $(AC_ACCOUNT_PASSWORD)
      xcrun notarytool submit "$(Build.ArtifactStagingDirectory)/product/App.zip" --keychain-profile "AC_PASSWORD" --wait
    displayName: "Notarize App"
    condition: and(eq( variables['sdk'], 'macosx' ), eq( variables['signing'], 'developerID' ))
